# -*- coding: utf-8 -*-
"""model_mobilenet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YY4rMnvuCEDXbgRYjHKD2lQlyjg-dJkm
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
x_train = np.load('/content/drive/MyDrive/Datagen/x_train.npy')
x_test = np.load('/content/drive/MyDrive/Datagen/x_test.npy')
y_train = np.load('/content/drive/MyDrive/Datagen/y_train.npy')
y_test = np.load('/content/drive/MyDrive/Datagen/y_test.npy')

# Check TensorFlow version
import tensorflow as tf
print(tf.__version__)

# Install any additional packages if needed
!pip install tensorflow

import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

x_train = x_train.astype('float32')/255
x_test = x_test.astype('float32')/255

# Load the MobileNetV2 model with pre-trained weights, excluding the top layers
base_model = MobileNetV2(input_shape=(224, 224, 3), include_top=False, weights='imagenet')

# Freeze the base model layers to prevent them from being trained
base_model.trainable = False

# Add custom layers on top of the base model
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(1024, activation='relu')(x)  # You can adjust this layer as needed

# Determine the number of classes
num_classes = np.max(y_train) + 1 # Assuming y_train contains class labels from 0 to (num_classes - 1)
predictions = Dense(num_classes, activation='softmax')(x)  # Set the number of units in the output layer

# Define the final model
model = Model(inputs=base_model.input, outputs=predictions)

model.compile(optimizer=Adam(learning_rate=0.001), loss='sparse_categorical_crossentropy', metrics=['accuracy'])

datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True)
datagen.fit(x_train)

history = model.fit(datagen.flow(x_train, y_train, batch_size=32), validation_data=(x_test, y_test), epochs=10)

loss , accuracy = model.evaluate(x_test , y_test)
print(f'loss : {loss} , accuracy : {accuracy * 100}')

pred = np.argmax(model.predict(x_test) , axis = 1)

from sklearn.metrics import classification_report , confusion_matrix
print(classification_report(y_test , pred))

cf = confusion_matrix(y_test , pred , normalize = 'true')
import seaborn as sns
sns.heatmap(cf , annot = True , cmap = 'crest')
plt.xlabel('Predicted');
plt.ylabel('Actual');

model.save('mobilenet.h5')

model.save('/content/drive/MyDrive/mobilenet.h5')

model.save('mobilenet.h5') # Save the model
from google.colab import files
files.download('mobilenet.h5') # Download the file using the correct name

!pip install tensorflowjs

!tensorflowjs_converter --input_format keras mobilenet.h5 tfjs

import tensorflow as tf

import keras

!tensorflowjs_converter --input_format=keras '/content/mobilenet.h5' '/content/drive/MyDrive/tfjs_dir'

!tensorflowjs_converter --input_format=keras 'mobilenet.h5' "/content/drive/MyDrive/tfjs_dir/"

!tensorflowjs_converter --input_format keras mobilenet.h5 tfjs_dir

