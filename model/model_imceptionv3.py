# -*- coding: utf-8 -*-
"""model_imceptionv3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ydxEbHemjBtvX3xNme3T8f3Ug4r8__ei
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
x_train = np.load('/content/drive/MyDrive/Datagen/x_train.npy')
x_test = np.load('/content/drive/MyDrive/Datagen/x_test.npy')
y_train = np.load('/content/drive/MyDrive/Datagen/y_train.npy')
y_test = np.load('/content/drive/MyDrive/Datagen/y_test.npy')

!pip install tensorflow

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.applications import InceptionV3
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Assuming x_train, y_train, x_test, y_test are already loaded and preprocessed

# Normalize pixel values to between 0 and 1
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# Resize if necessary (Inception-v3 expects 299x299 images)
x_train = tf.image.resize(x_train, (299, 299))
x_test = tf.image.resize(x_test, (299, 299))

# Load the InceptionV3 model with pre-trained ImageNet weights, exclude the top layer
base_model = InceptionV3(weights='imagenet', include_top=False, input_shape=(299, 299, 3))

# Freeze the base model's layers to retain pretrained features
base_model.trainable = False

# Add custom classification layers on top
num_classes = np.unique(y_train).size # Determine the number of unique classes in y_train
model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(1024, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(num_classes, activation='softmax')  # Set number of output neurons to the number of classes
])

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

base_model = InceptionV3(weights='imagenet', include_top=False, input_shape=(299, 299, 3))

# Freeze the base model's layers to retain pretrained features
base_model.trainable = False

# Add custom classification layers on top
num_classes = np.unique(y_train).size # Determine the number of unique classes in y_train
model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(1024, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(num_classes, activation='softmax')  # Set number of output neurons to the number of classes
])

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Data augmentation
datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

# Fit the data generator on the training data
datagen.fit(x_train)

# One-hot encode the labels
y_train_encoded = to_categorical(y_train, num_classes=num_classes) # One-hot encode y_train
y_test_encoded = to_categorical(y_test, num_classes=num_classes)   # One-hot encode y_test

# Train the model using one-hot encoded labels
history = model.fit(datagen.flow(x_train, y_train_encoded, batch_size=32), # Use encoded labels
                    validation_data=(x_test, y_test_encoded),             # Use encoded labels
                    epochs=10)

loss , accuracy = model.evaluate(x_test , y_test)
print(f'loss : {loss} , accuracy : {accuracy * 100}')

loss , accuracy = model.evaluate(x_test , y_test_encoded) # Use the one-hot encoded labels for evaluation
print(f'loss : {loss} , accuracy : {accuracy * 100}')

pred = np.argmax(model.predict(x_test) , axis = 1)

from sklearn.metrics import classification_report , confusion_matrix
print(classification_report(y_test , pred))

cf = confusion_matrix(y_test , pred , normalize = 'true')
import seaborn as sns
sns.heatmap(cf , annot = True , cmap = 'crest')
plt.xlabel('Predicted');
plt.ylabel('Actual');